#include <iostream>
#include <thread>
#include <mutex>
#include <chrono>
using namespace std;

const int NUM_PHILOSOPHERS = 5;
mutex forks[NUM_PHILOSOPHERS];  // one mutex for each fork

void philosopher(int id) {
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    // Resource hierarchy: always pick smaller first
    int first = min(left, right);
    int second = max(left, right);

    while (true) {
        // Thinking
        cout << "Philosopher " << id << " is thinking...\n";
        this_thread::sleep_for(chrono::milliseconds(500));

        // Hungry - try to pick forks
        cout << "Philosopher " << id << " tries to pick fork " << first << "\n";
        forks[first].lock();
        cout << "Philosopher " << id << " picked fork " << first << "\n";

        cout << "Philosopher " << id << " tries to pick fork " << second << "\n";
        forks[second].lock();
        cout << "Philosopher " << id << " picked fork " << second << "\n";

        // Eating
        cout << "Philosopher " << id << " is eating 🍝\n";
        this_thread::sleep_for(chrono::milliseconds(1000));

        // Put down forks
        forks[second].unlock();
        forks[first].unlock();
        cout << "Philosopher " << id << " put down forks\n";
    }
}

int main() {
    thread philosophers[NUM_PHILOSOPHERS];

    // Start threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosophers[i] = thread(philosopher, i);
    }

    // Join threads (infinite loop so they won’t end)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosophers[i].join();
    }

    return 0;
}
